// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { RssFeedsApiV1RssGetData, RssFeedsApiV1RssGetResponses, RssFeedsApiV1RssGetErrors, RssPreviewApiV1RssPreviewGetData, RssPreviewApiV1RssPreviewGetResponses, RssTagsApiV1RssTagsGetData, RssTagsApiV1RssTagsGetResponses, LivenessLivenessGetData, LivenessLivenessGetResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Rss Feeds
 * Get all RSS feeds
 *
 * args:
 * until: Optional[datetime] = get all feeds until this date, default is now - 7 days
 */
export const rssFeedsApiV1RssGet = <ThrowOnError extends boolean = false>(options?: Options<RssFeedsApiV1RssGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RssFeedsApiV1RssGetResponses, RssFeedsApiV1RssGetErrors, ThrowOnError>({
        url: '/api/v1/rss/',
        ...options
    });
};

/**
 * Rss Preview
 */
export const rssPreviewApiV1RssPreviewGet = <ThrowOnError extends boolean = false>(options?: Options<RssPreviewApiV1RssPreviewGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RssPreviewApiV1RssPreviewGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/rss/preview',
        ...options
    });
};

/**
 * Rss Tags
 */
export const rssTagsApiV1RssTagsGet = <ThrowOnError extends boolean = false>(options?: Options<RssTagsApiV1RssTagsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RssTagsApiV1RssTagsGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/rss/tags',
        ...options
    });
};

/**
 * Liveness
 */
export const livenessLivenessGet = <ThrowOnError extends boolean = false>(options?: Options<LivenessLivenessGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<LivenessLivenessGetResponses, unknown, ThrowOnError>({
        url: '/liveness',
        ...options
    });
};
