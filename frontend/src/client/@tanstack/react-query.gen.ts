// This file is auto-generated by @hey-api/openapi-ts

import { type Options, rssFeedsApiV1RssGet, rssPreviewApiV1RssPreviewGet, rssTagsApiV1RssTagsGet, livenessLivenessGet } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { RssFeedsApiV1RssGetData, RssPreviewApiV1RssPreviewGetData, RssTagsApiV1RssTagsGetData, LivenessLivenessGetData } from '../types.gen';
import { client } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const rssFeedsApiV1RssGetQueryKey = (options?: Options<RssFeedsApiV1RssGetData>) => createQueryKey('rssFeedsApiV1RssGet', options);

/**
 * Rss Feeds
 * Get all RSS feeds
 *
 * args:
 * until: Optional[datetime] = get all feeds until this date, default is now - 7 days
 */
export const rssFeedsApiV1RssGetOptions = (options?: Options<RssFeedsApiV1RssGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rssFeedsApiV1RssGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rssFeedsApiV1RssGetQueryKey(options)
    });
};

export const rssPreviewApiV1RssPreviewGetQueryKey = (options?: Options<RssPreviewApiV1RssPreviewGetData>) => createQueryKey('rssPreviewApiV1RssPreviewGet', options);

/**
 * Rss Preview
 */
export const rssPreviewApiV1RssPreviewGetOptions = (options?: Options<RssPreviewApiV1RssPreviewGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rssPreviewApiV1RssPreviewGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rssPreviewApiV1RssPreviewGetQueryKey(options)
    });
};

export const rssTagsApiV1RssTagsGetQueryKey = (options?: Options<RssTagsApiV1RssTagsGetData>) => createQueryKey('rssTagsApiV1RssTagsGet', options);

/**
 * Rss Tags
 */
export const rssTagsApiV1RssTagsGetOptions = (options?: Options<RssTagsApiV1RssTagsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rssTagsApiV1RssTagsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rssTagsApiV1RssTagsGetQueryKey(options)
    });
};

export const livenessLivenessGetQueryKey = (options?: Options<LivenessLivenessGetData>) => createQueryKey('livenessLivenessGet', options);

/**
 * Liveness
 */
export const livenessLivenessGetOptions = (options?: Options<LivenessLivenessGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await livenessLivenessGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: livenessLivenessGetQueryKey(options)
    });
};
